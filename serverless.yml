service: melvin-alexa-intent-handlers

frameworkVersion: ">=3.0.0 <4.0.0"

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${self:custom.stage}
  region: eu-west-1
  tracing:
    lambda: true
    apiGateway: true
  environment: ${self:custom.config.environment}
  lambdaHashingVersion: 20201221
  timeout: 30
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ssm:GetParameter
      Resource: arn:aws:ssm:${self:provider.region}:${aws:accountId}:parameter/${self:service}/{self:provider.stage}/*

    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
      Resource: arn:aws:dynamodb:ap-southeast-1:${aws:accountId}:table/${self:provider.environment.DYNAMODB_TABLE_VOICE_RECORDER}

    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:CreateTable
      Resource: arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.DYNAMODB_TABLE_USER_PREFERENCE}

    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.DYNAMODB_TABLE_USER_UTTERANCE}

    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.DYNAMODB_TABLE_USER_SESSION}

    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: arn:aws:ses:${self:provider.region}:${aws:accountId}:${self:provider.environment.SES_IDENTITY}

    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:ReceiveMessage
      Resource: arn:aws:sqs:${self:provider.region}:${aws:accountId}:${self:provider.environment.SQS_IRS}

    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:SendMessageBatch
      Resource: arn:aws:sqs:${self:provider.region}:${aws:accountId}:${self:provider.environment.SQS_WARMUP}

    - Effect: Allow
      Action:
        - events:describeRule
        - events:putRule
      Resource: arn:aws:events:${self:provider.region}:${aws:accountId}:rule/melvin-warmup-event-rule-${self:provider.stage}

    - Effect: Allow
      Action:
        - sts:AssumeRole
      Resource: arn:aws:iam::${aws:accountId}:role/melvin-${self:provider.stage}-skill-intent-handler-role

functions:
  alexa-skill:
    handler: src/alexa-skill.handler
    timeout: 30
    provisionedConcurrency: 1
    reservedConcurrency: 10
    memorySize: 3008
    events:
      - alexaSkill:
          appId: ${self:custom.config.alexa.appId}
          enabled: true

  sqs_irs_subscriber:
    handler: src/sqs/irs_subscriber.handler
    timeout: 900
    reservedConcurrency: 10
    memorySize: 3008
    events:
      - sqs: 
          arn: arn:aws:sqs:${self:provider.region}:${aws:accountId}:${self:provider.environment.SQS_IRS}
          enabled: true
          batchSize: 1

  warmup_service:
    handler: src/warmup_service/warmup_service.handler
    timeout: 30
    reservedConcurrency: 3
    memorySize: 3008
    events:
      - schedule:
          name: ${self:provider.environment.WARMUP_EVENT_RULE_NAME}
          description: "warmup service scheduled event rule"
          rate: rate(${self:provider.environment.WARMUP_EVENT_SCHEDULE_RATE})
          enabled: false
          input:
            stage: ${self:provider.stage}
            water: true

plugins:
  - serverless-prune-plugin
  - serverless-plugin-include-dependencies

package:
  exclude:
    - .vscode/**
  excludeDevDependencies: false

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, 'dev'}

  # Load our configuration file specific to the environment based on the stage parameter
  config: ${file(config/${self:provider.stage}.yml)}

  # This will delete all but the n-most recent versions of each function deployed.
  prune:
    automatic: true
    includeLayers: true
    number: 3
